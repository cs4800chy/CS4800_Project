type Event {
  id: ID!
  title: String!
  order: EventOrder
  orders(filter: ModelEventOrderFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelEventOrderConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  eventOrderId: ID
}

type EventOrder {
  id: ID!
  event: Event
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  eventOrdersId: ID
  eventOrderEventId: ID
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelEventConnection {
  items: [Event]!
  nextToken: String
}

input ModelEventFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  and: [ModelEventFilterInput]
  or: [ModelEventFilterInput]
  not: ModelEventFilterInput
  eventOrderId: ModelIDInput
}

type Query {
  getEvent(id: ID!): Event
  listEvents(id: ID, filter: ModelEventFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelEventConnection
}

input ModelEventConditionInput {
  title: ModelStringInput
  and: [ModelEventConditionInput]
  or: [ModelEventConditionInput]
  not: ModelEventConditionInput
  eventOrderId: ModelIDInput
}

input CreateEventInput {
  id: ID
  title: String!
  eventOrderId: ID
}

input UpdateEventInput {
  id: ID!
  title: String
  eventOrderId: ID
}

input DeleteEventInput {
  id: ID!
}

type Mutation {
  createEvent(input: CreateEventInput!, condition: ModelEventConditionInput): Event
  updateEvent(input: UpdateEventInput!, condition: ModelEventConditionInput): Event
  deleteEvent(input: DeleteEventInput!, condition: ModelEventConditionInput): Event
  createEventOrder(input: CreateEventOrderInput!, condition: ModelEventOrderConditionInput): EventOrder
  updateEventOrder(input: UpdateEventOrderInput!, condition: ModelEventOrderConditionInput): EventOrder
  deleteEventOrder(input: DeleteEventOrderInput!, condition: ModelEventOrderConditionInput): EventOrder
}

input ModelEventOrderConditionInput {
  and: [ModelEventOrderConditionInput]
  or: [ModelEventOrderConditionInput]
  not: ModelEventOrderConditionInput
  eventOrdersId: ModelIDInput
  eventOrderEventId: ModelIDInput
}

input CreateEventOrderInput {
  id: ID
  eventOrdersId: ID
  eventOrderEventId: ID
}

input UpdateEventOrderInput {
  id: ID!
  eventOrdersId: ID
  eventOrderEventId: ID
}

input DeleteEventOrderInput {
  id: ID!
}

type ModelEventOrderConnection {
  items: [EventOrder]!
  nextToken: String
}

input ModelEventOrderFilterInput {
  id: ModelIDInput
  and: [ModelEventOrderFilterInput]
  or: [ModelEventOrderFilterInput]
  not: ModelEventOrderFilterInput
  eventOrderEventId: ModelIDInput
}
